name: Build and Deploy Rails + Nginx App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      ECR_REPO_NAME_RAILS: malowtech-development-rails
      ECR_REPO_NAME_NGINX: malowtech-development-nginx
      IMAGE_TAG: latest
      TERRAFORM_DIR: infrastructure/dev

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Ensure ECR repositories exist
      working-directory: ${{ env.TERRAFORM_DIR }}
      run: |
        set -e

        ECR_RAILS_EXISTS=$(aws ecr describe-repositories --repository-names $ECR_REPO_NAME_RAILS --region $AWS_REGION --query 'repositories[0].repositoryName' --output text || echo "none")
        ECR_NGINX_EXISTS=$(aws ecr describe-repositories --repository-names $ECR_REPO_NAME_NGINX --region $AWS_REGION --query 'repositories[0].repositoryName' --output text || echo "none")

        if [[ "$ECR_RAILS_EXISTS" == "none" || "$ECR_NGINX_EXISTS" == "none" ]]; then
          echo "Creating missing ECR repositories with targeted Terraform apply..."
          terraform init
          terraform apply -auto-approve \
            -target=module.ecr_rails \
            -target=module.ecr_nginx
        else
          echo "ECR repositories already exist. Continuing..."
        fi


    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build & Push Rails Docker image
      run: |
        ECR_URI_RAILS=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME_RAILS }}
        docker build -f ./docker/app/Dockerfile -t $ECR_URI_RAILS:${{ env.IMAGE_TAG }} .
        docker push $ECR_URI_RAILS:${{ env.IMAGE_TAG }}
        echo "RAILS_IMAGE_URI=$ECR_URI_RAILS:${{ env.IMAGE_TAG }}" >> $GITHUB_ENV

    - name: Build & Push Nginx Docker image
      run: |
        ECR_URI_NGINX=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME_NGINX }}
        docker build -f ./docker/nginx/Dockerfile -t $ECR_URI_NGINX:${{ env.IMAGE_TAG }} .
        docker push $ECR_URI_NGINX:${{ env.IMAGE_TAG }}
        echo "NGINX_IMAGE_URI=$ECR_URI_NGINX:${{ env.IMAGE_TAG }}" >> $GITHUB_ENV
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.11.4

    - name: Terraform Format Check
      working-directory: ${{ env.TERRAFORM_DIR }}
      run: terraform fmt -check -recursive

    - name: Terraform Init
      working-directory: ${{ env.TERRAFORM_DIR }}
      run: terraform init

    - name: Terraform Validate
      working-directory: ${{ env.TERRAFORM_DIR }}
      run: terraform validate

    - name: Terraform Plan
      working-directory: ${{ env.TERRAFORM_DIR }}
      run: terraform plan

    - name: Terraform Apply
      working-directory: ${{ env.TERRAFORM_DIR }}
      run: terraform apply -auto-approve
